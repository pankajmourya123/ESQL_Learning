-- expection yaha par 1 http inpute jaha pe humai complete karna parse timing 
phir hum  2 compute node use karenge jismia ek normal compute aur 2 wala expection handling ke lye use karenge aur yeh dono ek hi http reply node ko connect karenge aur compute node mai compte mode ko all karenge expection wale 
compute node pe 

Parse Timing Modes

Parse timing defines when the parser processes a message in IBM Integration Bus (IIB) or App Connect Enterprise (ACE). There are three main parse timing modes:

a) Complete

The message must be parsed as XMLNSC (or the specified format).
Even if there is an error in the message, it will still pass through the flow.
Parsing occurs fully at the first point where the message is accessed.


b) No Demand
The message must be parsed as XMLNSC (or the specified format).
However, if there is an error in the message, it will not pass through the flow.
Parsing occurs only when a field is explicitly accessed in the ESQL code.


c) Immediate
The message must be parsed immediately when the input node receives it.
Any error in the message will cause immediate failure.
This mode ensures that the entire message is valid before processing continues.


Compute Mode defines how the message tree is handled when passing through a Compute Node in IBM Integration Bus (IIB) or App Connect Enterprise (ACE).
It determines which parts of the message tree are propagated to the next node.

1. All (Default) Mode
All parts of the message (InputRoot, LocalEnvironment, Environment, and ExceptionList) are copied and available for modification.
Changes to any part of the message tree will be reflected in the output.


2. Message Mode
Only the InputRoot (actual message content) is copied.
LocalEnvironment, Environment, and ExceptionList are not available.
Used when modifications are needed only in the message body.


3. LocalEnvironment and Message Mode
Both InputRoot and LocalEnvironment are copied.
Environment and ExceptionList are not available.
Useful when routing decisions depend on transport headers (like HTTP headers, MQMD headers, etc.).


4. Environment Mode
Only the Environment tree is copied.
The message (InputRoot) is not available.
Used when handling metadata without modifying the actual message.


5. LocalEnvironment Mode
Only LocalEnvironment is copied.
Message (InputRoot) and Environment are not available.
Useful for updating headers and routing information without affecting the message.


6. Exception Mode
Only ExceptionList is copied.
InputRoot, LocalEnvironment, and Environment are not available.
Used for error handling and debugging without accessing the main message.
Compute Mode defines how the message tree is handled when passing through a Compute Node in IBM Integration Bus (IIB) or App Connect Enterprise (ACE). It determines which parts of the message tree are propagated to the next node.



Failure Actions in IBM Integration Bus (IIB) / IBM ACE

1️⃣ Exception (Stops Immediately)
Definition: Stops processing as soon as the first error is encountered.
Use Case: When data integrity is critical.
Example:
A bank transaction API encounters an invalid account number → Stops immediately to prevent money transfer errors.


2️⃣ Exception List (Captures All Errors, Then Stops)
Definition: Collects all validation errors before stopping.
Use Case: When multiple fields need validation before halting the process.
Example:
A form submission with errors in name, email, and phone → Captures all errors first, then stops so the user gets a complete error list.



3️⃣ Local Error Log (Logs Errors, Continues Processing)
Definition: Logs errors in broker logs but does not stop execution.
Use Case: When errors need to be recorded without disrupting the process.
Example:
An e-commerce system logs invalid phone numbers but continues processing valid orders.



4️⃣ User Trace (Logs Errors in a Trace File, Continues Processing)
Definition: Logs errors for debugging but allows processing to continue.
Use Case: When in-depth debugging or analysis is required.
Example:
A data processing system logs errors in a trace file while continuing to process other records.



CREATE COMPUTE MODULE taskexpection_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN


		CALL CopyEntireMessage();
		RETURN TRUE;
	END;


	CREATE PROCEDURE CopyEntireMessage()
	BEGIN
		DECLARE messageNumber INTEGER;
		DECLARE messageText CHARACTER;
		 


		declare ptrException reference to InputExceptionList.*[1];
		DECLARE i INTEGER 1;
        DECLARE  count INTEGER ;
        
        /*SET count=CARDINALITY(	ptrException.ParserException.ParserException.Insert[]);	
        SET OutputRoot.JSON.Data.count=count;*/
        DECLARE res CHARACTER ;
        
        
        
		-- SET OutputRoot.XMLNSC.root.test.messageText= ptrException.ParserException.ParserException.Insert[5];
		 
		 SET OutputRoot.JSON.Data.errmessage =ptrException.ParserException.ParserException.Insert[5];
		DECLARE i INTEGER 1;
        DECLARE  count INTEGER ;
        declare ptrException reference to InputExceptionList.*[1];
        
       
        SET count=CARDINALITY(	ptrException.ParserException.ParserException.Insert[]);	
       
        DECLARE res CHARACTER ;
        SET res='__';
		WHILE i<=count DO
			DECLARE temp CHARACTER;
			 SET temp=ptrException.ParserException.ParserException.Insert[i].[2];
			SET res=res||temp||'__';
			SET i=i+1;
		END WHILE;
		 SET OutputRoot.JSON.Data.errmessage=res;
			
		/*WHILE lastmove(ptrException) DO
		IF ptrException.Number is not null THEN
		SET messageNumber = ptrException.Number;
		SET messageText = ptrException.Text;
		SET OutputRoot.XMLNSC.root.test[i].messageNumber=messageNumber;
		SET OutputRoot.XMLNSC.root.test[i].messageText=messageText;
		SET i=i+1;
		END IF;
		-- now move to the last child which should be the next exceptionlist
		move ptrException lastchild;
		END WHILE; */		
		
		
		
		

		/* DECLARE start REFERENCE TO InputExceptionList.*[1];
		SET OutputRoot.JSON.Data.errnumber = start.Number;
		SET OutputRoot.JSON.Data.text = start.Text;
		DECLARE total INTEGER CARDINALITY(InputExceptionList.*[]);
		SET total=3;
		SET OutputRoot.JSON.Data.total = 3;
		DECLARE i INTEGER 1;
		WHILE i <= total DO
		SET OutputRoot.JSON.Data.Exceptions[i].number = InputExceptionList.*[i].Number;
		SET OutputRoot.JSON.Data.Exceptions[i].Text = InputExceptionList.*[i].Text;
		SET i = i + 1;
		END WHILE;
		*/		


		

		END;
	END MODULE;

